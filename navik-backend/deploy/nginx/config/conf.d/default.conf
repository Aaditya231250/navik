server {
    listen 80;
    server_name localhost;

    # Root welcome page
    location / {
        return 200 'Welcome to Navik Backend API Gateway\n';
        add_header Content-Type text/plain;
    }

    # Kafka UI
    location /kafka-ui {
        proxy_pass http://kafka-ui:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Location Service API
    location /api/location {
        proxy_pass http://location-producer:6969/api/location;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Matching Service API
    location /api/matching {
        proxy_pass http://matching-producer:7979/api/matching;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /internal/health/location-producer {
    internal;
    proxy_pass http://location-producer:6969/health;
    proxy_set_header Host $host;
    proxy_connect_timeout 5s; 
    proxy_read_timeout 5s;     
    proxy_send_timeout 5s;     
    }

    location = /internal/health/matching-producer {
    internal;
    proxy_pass http://matching-producer:7979/health;
    proxy_set_header Host $host;
    proxy_connect_timeout 5s; 
    proxy_read_timeout 5s;     
    proxy_send_timeout 5s;     
    }

location /health {
    default_type application/json;
    
    content_by_lua_block {
        local location_res = ngx.location.capture("/internal/health/location-producer")
        local matching_res = ngx.location.capture("/internal/health/matching-producer")
        
        local location_status = "down"
        local matching_status = "down"
        
        if location_res and location_res.status == 200 then
            location_status = "up"
        end
        
        if matching_res and matching_res.status == 200 then
            matching_status = "up"
        end
        
        local overall_status = "degraded"
        if location_status == "up" and matching_status == "up" then
            overall_status = "healthy"
        end
        
        -- Set HTTP status code based on overall health
        if overall_status ~= "healthy" then
            ngx.status = 503
        else
            ngx.status = 200
        end
        
        local response = string.format('{"status":"%s","services":{"kafka":"up","location-service":"%s","matching-service":"%s"}}', 
            overall_status,
            location_status,
            matching_status
        )
        
        ngx.say(response)
    }
}
}