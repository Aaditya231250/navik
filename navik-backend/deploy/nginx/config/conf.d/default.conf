server {
    listen 80;
    server_name localhost;

    # Root welcome page
    location / {
        return 200 'Welcome to Navik Backend API Gateway\n';
        add_header Content-Type text/plain;
    }

    # Kafka UI
    location /kafka-ui {
        proxy_pass http://kafka-ui:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Location Service API
    location /api/location {
        proxy_pass http://location-producer:6969/api/location;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

<<<<<<< HEAD
    location = /internal/health/producer {
    internal;
    proxy_pass http://location-producer:6969/health;
    proxy_set_header Host $host;
    proxy_connect_timeout 5s; 
    proxy_read_timeout 5s;     
    proxy_send_timeout 5s;     
    }

    location /health {
        default_type application/json;
        
        content_by_lua_block {
            local res = ngx.location.capture("/internal/health/producer")
            local producer_status = "down"
            
            if res and res.status == 200 then
                producer_status = "up"
            end
            
            local response = string.format('{"status":"healthy","services":{"kafka":"up","location-service":"%s"}}', producer_status)
            ngx.say(response)
        }
=======
    # Health check endpoint
    location /health {
        return 200 '{"status":"healthy","services":{"kafka":"up","location-service":"up"}}\n';
        add_header Content-Type application/json;
>>>>>>> 720ad3a7fd4ab94599ce281188b9e314051f2832
    }
}